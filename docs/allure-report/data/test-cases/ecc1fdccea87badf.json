{
  "uid" : "ecc1fdccea87badf",
  "name" : "floating point asserts",
  "fullName" : "floating point asserts",
  "historyId" : "b1cb0e84c1f1e1373b62fdbf19a9fb32",
  "time" : {
    "start" : 1594302976012,
    "stop" : 1594302980540,
    "duration" : 4528
  },
  "description" : "\n        Asserts for floating point numbers looks the same as for integers. \n        Be aware that you can not simply check two floating point numbers for equality \n        and should always provide delta that sets value comparison error limit.\n    ",
  "descriptionHtml" : "<pre><code>    Asserts for floating point numbers looks the same as for integers. \n    Be aware that you can not simply check two floating point numbers for equality \n    and should always provide delta that sets value comparison error limit.\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n        Asserts for floating point numbers looks the same as for integers. \n        Be aware that you can not simply check two floating point numbers for equality \n        and should always provide delta that sets value comparison error limit.\n    ",
    "status" : "passed",
    "steps" : [ {
      "name" : "Code snippet",
      "time" : {
        "start" : 1594302976236,
        "stop" : 1594302976243,
        "duration" : 7
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "6639317c3ac0cdf2",
        "name" : "code-snippet",
        "source" : "6639317c3ac0cdf2.txt",
        "type" : "text/plain",
        "size" : 1006
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Given server for url answers json (url: /asserts/standard/double/indicator, response: \n                {\n                    \"indicator\": 120.5,\n                }\n                )",
      "time" : {
        "start" : 1594302976254,
        "stop" : 1594302976255,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "bodyJson()[\"indicator\"] == 120 (with delta = 1.0)",
      "time" : {
        "start" : 1594302980469,
        "stop" : 1594302980469,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "bodyJson()[\"indicator\"] == 120.5 (with delta = 0.1)",
      "time" : {
        "start" : 1594302980470,
        "stop" : 1594302980470,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "bodyJson()[\"indicator\"] <= 120.5",
      "time" : {
        "start" : 1594302980471,
        "stop" : 1594302980471,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "bodyJson()[\"indicator\"] <= 121.0",
      "time" : {
        "start" : 1594302980472,
        "stop" : 1594302980472,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "bodyJson()[\"indicator\"] < 121.0",
      "time" : {
        "start" : 1594302980474,
        "stop" : 1594302980474,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "bodyJson()[\"indicator\"] > 120.0",
      "time" : {
        "start" : 1594302980511,
        "stop" : 1594302980511,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "bodyJson()[\"indicator\"] >= 120.0",
      "time" : {
        "start" : 1594302980511,
        "stop" : 1594302980512,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "bodyJson()[\"indicator\"] >= 120.5",
      "time" : {
        "start" : 1594302980512,
        "stop" : 1594302980512,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "3c5c520cf937f1de",
      "name" : "request http://localhost:46406/asserts/standard/double/indicator",
      "source" : "3c5c520cf937f1de.txt",
      "type" : "text/plain",
      "size" : 263
    }, {
      "uid" : "4e0a5cafabfe523a",
      "name" : "response http://localhost:46406/asserts/standard/double/indicator",
      "source" : "4e0a5cafabfe523a.txt",
      "type" : "text/plain",
      "size" : 251
    } ],
    "parameters" : [ ],
    "stepsCount" : 10,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "framework",
    "value" : "corounit"
  }, {
    "name" : "package",
    "value" : "Documentation"
  }, {
    "name" : "suite",
    "value" : "ru.fix.kbdd.example.cases.documentation.ResponseAsserts"
  }, {
    "name" : "feature",
    "value" : "Standard"
  }, {
    "name" : "testMethod",
    "value" : "floating point asserts"
  }, {
    "name" : "epic",
    "value" : "Asserts"
  }, {
    "name" : "testClass",
    "value" : "ru.fix.kbdd.example.cases.documentation.ResponseAsserts"
  }, {
    "name" : "thread",
    "value" : "2bd04551-67ef-477e-8318-d8fea5e4a1e1"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "ecc1fdccea87badf.json",
  "parameterValues" : [ ]
}