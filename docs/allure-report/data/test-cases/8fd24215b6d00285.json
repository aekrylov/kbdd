{
  "uid" : "8fd24215b6d00285",
  "name" : "string asserts",
  "fullName" : "string asserts",
  "historyId" : "ff2837375a4b2a3c480a597db3dc298d",
  "time" : {
    "start" : 1594207792475,
    "stop" : 1594207793752,
    "duration" : 1277
  },
  "description" : "\n        Asserts for strings validate content. \n        String also can be lexicographicaly compared to another string.\n    ",
  "descriptionHtml" : "<pre><code>    Asserts for strings validate content. \n    String also can be lexicographicaly compared to another string.\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "bodyJson()[\"text\"].isMatches(\"\\d\"), actual:\nBrown little fox with 4 friends",
  "statusTrace" : "java.lang.AssertionError: bodyJson()[\"text\"].isMatches(\"\\d\"), actual:\nBrown little fox with 4 friends\n\tat ru.fix.kbdd.asserts.DefaultAssertor.assert(KPath.kt:11)\n\tat ru.fix.kbdd.asserts.AlluredKPath$1.assert(AlluredKPath.kt:13)\n\tat ru.fix.kbdd.asserts.KPath.express(KPath.kt:67)\n\tat ru.fix.kbdd.asserts.CheckableKt.isMatches(Checkable.kt:207)\n\tat ru.fix.kbdd.example.cases.ResponseAsserts.string asserts(ResponseAsserts.kt:107)\n\tat ru.fix.kbdd.example.cases.ResponseAsserts$string asserts$1.invokeSuspend(ResponseAsserts.kt)\n\tat \b\b\b(Coroutine boundary.\b(\b)\n\tat ru.fix.corounit.engine.ExecutionContext.notifyListenerAndRunInSupervisorScope(ExecutionContext.kt:21)\n\tat ru.fix.corounit.engine.ClassRunner$executeMethod$2.invokeSuspend(ClassRunner.kt:118)\nCaused by: java.lang.AssertionError: bodyJson()[\"text\"].isMatches(\"\\d\"), actual:\nBrown little fox with 4 friends\n\tat ru.fix.kbdd.asserts.DefaultAssertor.assert(KPath.kt:11)\n\tat ru.fix.kbdd.asserts.AlluredKPath$1.assert(AlluredKPath.kt:13)\n\tat ru.fix.kbdd.asserts.KPath.express(KPath.kt:67)\n\tat ru.fix.kbdd.asserts.CheckableKt.isMatches(Checkable.kt:207)\n\tat ru.fix.kbdd.example.cases.ResponseAsserts.string asserts(ResponseAsserts.kt:107)\n\tat ru.fix.kbdd.example.cases.ResponseAsserts$string asserts$1.invokeSuspend(ResponseAsserts.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:56)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n        Asserts for strings validate content. \n        String also can be lexicographicaly compared to another string.\n    ",
    "status" : "failed",
    "statusMessage" : "bodyJson()[\"text\"].isMatches(\"\\d\"), actual:\nBrown little fox with 4 friends",
    "statusTrace" : "java.lang.AssertionError: bodyJson()[\"text\"].isMatches(\"\\d\"), actual:\nBrown little fox with 4 friends\n\tat ru.fix.kbdd.asserts.DefaultAssertor.assert(KPath.kt:11)\n\tat ru.fix.kbdd.asserts.AlluredKPath$1.assert(AlluredKPath.kt:13)\n\tat ru.fix.kbdd.asserts.KPath.express(KPath.kt:67)\n\tat ru.fix.kbdd.asserts.CheckableKt.isMatches(Checkable.kt:207)\n\tat ru.fix.kbdd.example.cases.ResponseAsserts.string asserts(ResponseAsserts.kt:107)\n\tat ru.fix.kbdd.example.cases.ResponseAsserts$string asserts$1.invokeSuspend(ResponseAsserts.kt)\n\tat \b\b\b(Coroutine boundary.\b(\b)\n\tat ru.fix.corounit.engine.ExecutionContext.notifyListenerAndRunInSupervisorScope(ExecutionContext.kt:21)\n\tat ru.fix.corounit.engine.ClassRunner$executeMethod$2.invokeSuspend(ClassRunner.kt:118)\nCaused by: java.lang.AssertionError: bodyJson()[\"text\"].isMatches(\"\\d\"), actual:\nBrown little fox with 4 friends\n\tat ru.fix.kbdd.asserts.DefaultAssertor.assert(KPath.kt:11)\n\tat ru.fix.kbdd.asserts.AlluredKPath$1.assert(AlluredKPath.kt:13)\n\tat ru.fix.kbdd.asserts.KPath.express(KPath.kt:67)\n\tat ru.fix.kbdd.asserts.CheckableKt.isMatches(Checkable.kt:207)\n\tat ru.fix.kbdd.example.cases.ResponseAsserts.string asserts(ResponseAsserts.kt:107)\n\tat ru.fix.kbdd.example.cases.ResponseAsserts$string asserts$1.invokeSuspend(ResponseAsserts.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:56)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n",
    "steps" : [ {
      "name" : "Code snippet",
      "time" : {
        "start" : 1594207792521,
        "stop" : 1594207792523,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "6d2e3a6bc4bed68b",
        "name" : "code-snippet",
        "source" : "6d2e3a6bc4bed68b.txt",
        "type" : "text/plain",
        "size" : 505
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Given server for url answers (url: /asserts/standard/string/text, response: \n                {\n                    \"text\": \"Brown little fox with 4 friends\",\n                }\n                )",
      "time" : {
        "start" : 1594207792533,
        "stop" : 1594207792534,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "bodyJson()[\"text\"].isContains(little)",
      "time" : {
        "start" : 1594207793741,
        "stop" : 1594207793741,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "bodyJson()[\"text\"].isMatches(\"\\d\")",
      "time" : {
        "start" : 1594207793743,
        "stop" : 1594207793743,
        "duration" : 0
      },
      "status" : "failed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "1120d57f837cbcac",
      "name" : "request http://localhost:59283/asserts/standard/string/text",
      "source" : "1120d57f837cbcac.txt",
      "type" : "text/plain",
      "size" : 258
    }, {
      "uid" : "920f19eaaab727da",
      "name" : "response http://localhost:59283/asserts/standard/string/text",
      "source" : "920f19eaaab727da.txt",
      "type" : "text/plain",
      "size" : 274
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "framework",
    "value" : "corounit"
  }, {
    "name" : "package",
    "value" : "ru.fix.kbdd.example.cases.ResponseAsserts"
  }, {
    "name" : "suite",
    "value" : "ru.fix.kbdd.example.cases.ResponseAsserts"
  }, {
    "name" : "feature",
    "value" : "Standard"
  }, {
    "name" : "testMethod",
    "value" : "string asserts"
  }, {
    "name" : "epic",
    "value" : "Asserts"
  }, {
    "name" : "testClass",
    "value" : "ru.fix.kbdd.example.cases.ResponseAsserts"
  }, {
    "name" : "thread",
    "value" : "c3be1af6-2c09-46c6-9a63-916431637024"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "8fd24215b6d00285.json",
  "parameterValues" : [ ]
}