{
  "uid" : "edeb53d9fbae606d",
  "name" : "provide custom assert",
  "fullName" : "provide custom assert",
  "historyId" : "e3c6a295f21d2031db18d26b804eb82f",
  "time" : {
    "start" : 1594281668855,
    "stop" : 1594281673434,
    "duration" : 4579
  },
  "description" : "\n        You can write custom asserts by providing extension function. \n        All asserts and navigation methods implemented via extension function \n        to the `Checkable` and `Explorable` interfaces.\n        To add new one simply write your own extension functions to these interfaces \n        and follow convention of default onces.\n        Maybe your asserts is worth to be added to default asserts list into KBDD project. \n        Pull Requests are welcome!\n    ",
  "descriptionHtml" : "<pre><code>    You can write custom asserts by providing extension function. \n    All asserts and navigation methods implemented via extension function \n    to the `Checkable` and `Explorable` interfaces.\n    To add new one simply write your own extension functions to these interfaces \n    and follow convention of default onces.\n    Maybe your asserts is worth to be added to default asserts list into KBDD project. \n    Pull Requests are welcome!\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n        You can write custom asserts by providing extension function. \n        All asserts and navigation methods implemented via extension function \n        to the `Checkable` and `Explorable` interfaces.\n        To add new one simply write your own extension functions to these interfaces \n        and follow convention of default onces.\n        Maybe your asserts is worth to be added to default asserts list into KBDD project. \n        Pull Requests are welcome!\n    ",
    "status" : "passed",
    "steps" : [ {
      "name" : "Code snippet",
      "time" : {
        "start" : 1594281669026,
        "stop" : 1594281669031,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5b94b66537cc171e",
        "name" : "code-snippet",
        "source" : "5b94b66537cc171e.txt",
        "type" : "text/plain",
        "size" : 1006
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Given server for url answers (url: /asserts/custom/int/amount, response: \n                {\n                    \"amount\": 120,\n                }\n                )",
      "time" : {
        "start" : 1594281669073,
        "stop" : 1594281669074,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "custom assert via extension method",
      "time" : {
        "start" : 1594281673243,
        "stop" : 1594281673423,
        "duration" : 180
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "bodyJson()[\"amount\"] isEvenInteger",
        "time" : {
          "start" : 1594281673422,
          "stop" : 1594281673422,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "custom assert without extension method",
      "time" : {
        "start" : 1594281673423,
        "stop" : 1594281673428,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "a9b5bf8b8df0b17b",
      "name" : "request http://localhost:30785/asserts/custom/int/amount",
      "source" : "a9b5bf8b8df0b17b.txt",
      "type" : "text/plain",
      "size" : 255
    }, {
      "uid" : "91648bbf39058a82",
      "name" : "response http://localhost:30785/asserts/custom/int/amount",
      "source" : "91648bbf39058a82.txt",
      "type" : "text/plain",
      "size" : 246
    } ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "framework",
    "value" : "corounit"
  }, {
    "name" : "package",
    "value" : "ru.fix.kbdd.example.cases.ResponseCustomAsserts"
  }, {
    "name" : "suite",
    "value" : "ru.fix.kbdd.example.cases.ResponseCustomAsserts"
  }, {
    "name" : "feature",
    "value" : "Custom"
  }, {
    "name" : "testMethod",
    "value" : "provide custom assert"
  }, {
    "name" : "epic",
    "value" : "Asserts"
  }, {
    "name" : "testClass",
    "value" : "ru.fix.kbdd.example.cases.ResponseCustomAsserts"
  }, {
    "name" : "thread",
    "value" : "f1f82b98-14b4-4a97-83cc-21aa66035cdb"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "edeb53d9fbae606d.json",
  "parameterValues" : [ ]
}